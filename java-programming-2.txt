 
Sol 1: A data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently. 
Data structures provide a means to manage large amounts of data efficiently. efficient data structures are a key to designing efficient algorithms.

Sol 2: Data structures are used to implement the physical forms of abstract data types.
Applications - > Arrays,Hashmap,Stack,Heap,LinkedList so on..

Sol 3: Advantages of linkedlist over arrays
Dynamic Data Structure
Easy Insertion and Deleting
No memory leakage
Data structures such as stack and queues can be easily implemented using linked list.

Sol 4: struct node 
{
    int num;                        //Data of the node
    struct node *nextptr;           //Address of the next node
}*stnode;


Sol 5: 1.The double linked list can be traversed both in forward and backward direction i.e bidirectionally.
2.It is also more efficient in the delete operation whenever the pointer to node is given.
3.We can quickly insert a new node before a given node.

Sol 6: Both are the most efficient ways for storing and accessing data and you can certainly implement a stack with an array with the exception of working principle and access control. 
A stack is a basic representation of collection of items in a data structure where the items are arranged in a particular order so that they can be inserted and removed from one end only, 
which is from the top of the stack in a LIFO or FILO order.
An array is a static object where the number of items is fixed and unlike stacks, items in an array can be added and removed from either end regardless of the order.

Sol 7: 2 Queues are needed, for storing data and other for the priorities.

Sol 8: Traversals techniques in a tree :
    1.Inorder traversal
    2.Pre order traversal
    3.Post order traversal

Sol 9: Binary search trees are more of sorted binary trees that allows for fast and efficient lookup of items. 
Unlike binary trees, binary search trees keep their keys sorted, so lookup usually implements binary search for operations.

Sol 10: Graphs are data structures that you use every day through Google Search, Google Maps, GPS, and social media. They are used to represent elements that share connections. 
The elements in the graph are called Nodes and the connections between them are called Edges. Graphs are used to represent networks of communication. Graphs are used to represent data organization.

Sol 11: Yes, Binary search is possible on the linkedlist if the list is ordered and you know the count of elements in list but it wont be efficient.

Sol 12: A memory leak is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in a way that memory which is no longer needed is not released.
 A memory leak may also happen when an object is stored in memory but cannot be accessed by the running code

Sol 13: If a node is a left child, then its key and the keys of the nodes in its right subtree are less than its parent’s key.
If a node is a right child, then its key and the keys of the nodes in its left subtree are greater than its parent’s key.

Sol 14: Stack is used to perform recursive operation because of its LIFO property. Recursion 
makes use of system stack for storing the return addresses of the function calls. 
Every recursive function has its equivalent iterative (non-recursive) function.

Sol 15: Stacks can be used for expression evaluation.
Stacks can be used to check parenthesis matching in an expression.
Stacks can be used for Conversion from one form of expression to another.
Stacks can be used for Memory Management.
Stacks can be used for recursive operations.

16.Convert the expression to a post and prefix notations?
Ans: ------ No expression



Sol 17: import java.util.*; 
  
class SortStack 
{ 
    public static Stack<Integer> sortstack(Stack<Integer>  
                                             input) 
    { 
        Stack<Integer> tmpStack = new Stack<Integer>(); 
        while(!input.isEmpty()) 
        { 
            // pop out the first element 
            int tmp = input.pop(); 
          
            while(!tmpStack.isEmpty() && tmpStack.peek()  
                                                 > tmp) 
            { 
            input.push(tmpStack.pop()); 
            } 
              
            tmpStack.push(tmp); 
        } 
        return tmpStack; 
    } 
      
    public static void main(String args[]) 
    { 
        Stack<Integer> input = new Stack<Integer>(); 
        input.add(34); 
        input.add(3); 
        input.add(31); 
        input.add(98); 
        input.add(92); 
        input.add(23); 
      
        Stack<Integer> tmpStack=sortstack(input); 
        System.out.println("Sorted numbers are:"); 
      
        while (!tmpStack.empty()) 
        { 
            System.out.print(tmpStack.pop()+" "); 
        }  
    } 
} 


Sol 18: import java.util.LinkedList; 
import java.util.Queue; 
import java.util.Stack; 
  
public class Queue_reverse { 
      
    static Queue<Integer> queue; 
  
    static void Print() 
    { 
        while (!queue.isEmpty()) { 
            System.out.print( queue.peek() + ", "); 
            queue.remove(); 
        } 
    } 
  
    static void reversequeue() 
    { 
        Stack<Integer> stack = new Stack<>(); 
        while (!queue.isEmpty()) { 
            stack.add(queue.peek()); 
            queue.remove(); 
        } 
        while (!stack.isEmpty()) { 
            queue.add(stack.peek()); 
            stack.pop(); 
        } 
    } 
  
    public static void main(String args[]) 
    { 
        queue = new LinkedList<Integer>(); 
        queue.add(10); 
        queue.add(20); 
        queue.add(30); 
        queue.add(40); 
        queue.add(50); 
        queue.add(60); 
        queue.add(70); 
        queue.add(80); 
        queue.add(90); 
        queue.add(100); 
  
        reversequeue(); 
        Print(); 
    } 
} 


Sol 19: import java.util.LinkedList; 
import java.util.Queue; 
import java.util.Stack; 
  
public class Reverse_k_element_queue { 
  
    static Queue<Integer> queue; 
  
    static void reverseQueueFirstKElements(int k) 
    { 
        if (queue.isEmpty() == true
            || k > queue.size()) 
            return; 
        if (k <= 0) 
            return; 
  
        Stack<Integer> stack = new Stack<Integer>(); 
  
        for (int i = 0; i < k; i++) { 
            stack.push(queue.peek()); 
            queue.remove(); 
        } 
  
        while (!stack.empty()) { 
            queue.add(stack.peek()); 
            stack.pop(); 
        } 
  
        for (int i = 0; i < queue.size() - k; i++) { 
            queue.add(queue.peek()); 
            queue.remove(); 
        } 
    } 
 
    static void Print() 
    { 
        while (!queue.isEmpty()) { 
            System.out.print(queue.peek() + " "); 
            queue.remove(); 
        } 
    } 
  
    public static void main(String args[]) 
    { 
        queue = new LinkedList<Integer>(); 
        queue.add(10); 
        queue.add(20); 
        queue.add(30); 
        queue.add(40); 
        queue.add(50); 
        queue.add(60); 
        queue.add(70); 
        queue.add(80); 
        queue.add(90); 
        queue.add(100); 
  
        int k = 5; 
        reverseQueueFirstKElements(k); 
        Print(); 
    } 
} 


Sol 20: class LinkedList { 
    Node head; 
  
    class Node { 
        int data; 
        Node next; 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
    void printNthFromLast(int n) 
    { 
        int len = 0; 
        Node temp = head; 
  
        while (temp != null) { 
            temp = temp.next; 
            len++; 
        } 
  
        if (len < n) 
            return; 
  
        temp = head; 
  
        for (int i = 1; i < len - n + 1; i++) 
            temp = temp.next; 
  
        System.out.println(temp.data); 
    } 
  
    public void push(int new_data) 
    { 
        Node new_node = new Node(new_data); 
  
        new_node.next = head; 
  
        head = new_node; 
    } 
  
    public static void main(String[] args) 
    { 
        LinkedList llist = new LinkedList(); 
        llist.push(20); 
        llist.push(4); 
        llist.push(15); 
        llist.push(35); 
  
        llist.printNthFromLast(4); 
    } 
} 


Sol 21: class LinkedList { 
  
    static Node head; 
  
    static class Node { 
  
        int data; 
        Node next; 
  
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
    Node reverse(Node node) 
    { 
        Node prev = null; 
        Node current = node; 
        Node next = null; 
        while (current != null) { 
            next = current.next; 
            current.next = prev; 
            prev = current; 
            current = next; 
        } 
        node = prev; 
        return node; 
    } 
  
    void printList(Node node) 
    { 
        while (node != null) { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
    } 
  
    public static void main(String[] args) 
    { 
        LinkedList list = new LinkedList(); 
        list.head = new Node(85); 
        list.head.next = new Node(15); 
        list.head.next.next = new Node(4); 
        list.head.next.next.next = new Node(20); 
  
        System.out.println("Given Linked list"); 
        list.printList(head); 
        head = list.reverse(head); 
        System.out.println(""); 
        System.out.println("Reversed linked list "); 
        list.printList(head); 
    } 
} 


Sol 22: import java.util.*; 
  
class GFG { 
  
    static void changeArr(int[] input) 
    { 
        int newArray[] 
            = Arrays 
                  .copyOfRange(input, 
                               0, 
                               input.length); 
  
        Arrays.sort(newArray); 
        int i; 
       
        Map<Integer, Integer> ranks 
            = new HashMap<>(); 
  
        int rank = 1; 
  
        for (int index = 0; 
             index < newArray.length; 
             index++) { 
  
            int element = newArray[index]; 
  
            if (ranks.get(element) == null) { 
  
                ranks.put(element, rank); 
                rank++; 
            } 
        } 
  
        for (int index = 0; 
             index < input.length; 
             index++) { 
  
            int element = input[index]; 
            input[index] 
                = ranks.get(input[index]); 
         
        } 
    } 
  
    public static void main(String[] args) 
    { 
       
        int[] arr = { 100, 2, 70, 2 }; 
  
        changeArr(arr); 
  
        System 
            .out 
            .println(Arrays 
                         .toString(arr)); 
    } 
} 


Sol 23: import java.io.*; 
import java.util.*; 
  
class Graph 
{ 
    private int V;  
    private LinkedList<Integer> adj[]; 
  
    Graph(int v) 
    { 
        V = v; 
        adj = new LinkedList[v]; 
        for (int i=0; i<v; ++i) 
            adj[i] = new LinkedList(); 
    } 
  
    void addEdge(int v,int w) 
    { 
        adj[v].add(w); 
        adj[w].add(v); 
    } 
  
    Boolean isCyclicUtil(int v, Boolean visited[], int parent) 
    { 
    
        visited[v] = true; 
        Integer i; 
  
        Iterator<Integer> it = adj[v].iterator(); 
        while (it.hasNext()) 
        { 
            i = it.next(); 
  
            if (!visited[i]) 
            { 
                if (isCyclicUtil(i, visited, v)) 
                    return true; 
            } 
  
            else if (i != parent) 
               return true; 
        } 
        return false; 
    } 
  
    Boolean isTree() 
    { 
        Boolean visited[] = new Boolean[V]; 
        for (int i = 0; i < V; i++) 
            visited[i] = false; 
  
        if (isCyclicUtil(0, visited, -1)) 
            return false; 
  
        for (int u = 0; u < V; u++) 
            if (!visited[u]) 
                return false; 
  
        return true; 
    } 
  
    public static void main(String args[]) 
    { 
        Graph g1 = new Graph(5); 
        g1.addEdge(1, 0); 
        g1.addEdge(0, 2); 
        g1.addEdge(0, 3); 
        g1.addEdge(3, 4); 
        if (g1.isTree()) 
            System.out.println("Graph is Tree"); 
        else
            System.out.println("Graph is not Tree"); 
  
        Graph g2 = new Graph(5); 
        g2.addEdge(1, 0); 
        g2.addEdge(0, 2); 
        g2.addEdge(2, 1); 
        g2.addEdge(0, 3); 
        g2.addEdge(3, 4); 
  
        if (g2.isTree()) 
            System.out.println("Graph is Tree"); 
        else
            System.out.println("Graph is not Tree"); 
  
    } 
} 


Sol 24: import java.util.Arrays; 
import java.util.Collections; 
  
class GFG { 
    public static int kthSmallest(Integer[] arr, 
                                  int k) 
    { 
        // Sort the given array 
        Arrays.sort(arr); 
  
        // Return k'th element in 
        // the sorted array 
        return arr[k - 1]; 
    } 
  
    // driver program 
    public static void main(String[] args) 
    { 
        Integer arr[] = new Integer[] { 12, 3, 5, 7, 19 }; 
        int k = 2; 
        System.out.print("K'th smallest element is " + kthSmallest(arr, k)); 
    } 
} 



Sol 25: Using Dijkstra’s Shortest path algorithm. 
For a given source vertex (node) in the graph, the algorithm finds the path with lowest cost (i.e. the shortest path) between that vertex and every other vertex. 

